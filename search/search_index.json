{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home / Introduction","text":"<p>\ud83c\udfe0 Home | \ud83c\udfa8 Design | \ud83e\udde0 Algorithm | \ud83d\udc1e Debugging | \ud83e\udde0 Reflection</p>"},{"location":"#digital-rain-in-modern-c","title":"\ud83c\udf27\ufe0f Digital Rain in Modern C++","text":"<p>Welcome to my blog on creating a Digital Rain effect using Modern C++! This project was inspired by the iconic Matrix-style digital rain, and explores graphics, algorithm design, and performance.</p> <p>\ud83d\udc49 Jump to the Design | See the Code | Debugging | Reflection</p>"},{"location":"#project-overview","title":"\ud83c\udfaf Project Overview","text":"<ul> <li>\u2705 Random falling characters</li> <li>\u2705 Character fading/lifespan</li> <li>\u2705 Real-time Windows console rendering</li> <li>\u2705 Modular object-oriented design</li> </ul>"},{"location":"algorithm/","title":"Algorithm Details","text":"<p>\ud83c\udfe0 Home | \ud83c\udfa8 Design | \ud83e\udde0 Algorithm | \ud83d\udc1e Debugging | \ud83e\udde0 Reflection</p>"},{"location":"algorithm/#random-drop-creation","title":"\ud83c\udfb2 Random Drop Creation","text":"<p>Each column has a 10% chance to create a new drop per frame if it\u2019s empty.</p> <pre><code>if (rand() % 100 &lt; 10 &amp;&amp; columns[x].empty()) {\n    createNewDrop(x);\n}\n</code></pre>"},{"location":"algorithm/#fading-and-deletion","title":"\ud83d\udca1 Fading and Deletion","text":"<p>Characters fade as their <code>life</code> reduces. Below <code>life &lt; 5</code>, intensity is dimmed.</p> <pre><code>if (dc.life &lt; 5) {\n    color = dc.color &amp; ~FOREGROUND_INTENSITY;\n}\n</code></pre>"},{"location":"design/","title":"Design &amp; Test","text":"<p>\ud83c\udfe0 Home | \ud83c\udfa8 Design | \ud83e\udde0 Algorithm | \ud83d\udc1e Debugging | \ud83e\udde0 Reflection</p>"},{"location":"design/#architecture-overview","title":"\ud83e\uddf1 Architecture Overview","text":"<p>The project is composed of 3 classes: - <code>DigitalRain</code>: Manages the animation loop and rendering - <code>DropChar</code>: A struct for each falling character (value, color, lifespan) - <code>CharacterStream</code>: Generates random characters</p>"},{"location":"design/#testing-strategy","title":"\ud83e\uddea Testing Strategy","text":"<ul> <li>Manual console resizing</li> <li>Keyboard exit using <code>_kbhit()</code></li> <li>Visual inspection of fading, motion, and spacing</li> </ul>"},{"location":"assets/problemsolving/","title":"Problem Solving","text":"<p>\ud83c\udfe0 Home | \ud83c\udfa8 Design | \ud83e\udde0 Algorithm | \ud83d\udc1e Debugging | \ud83e\udde0 Reflection</p>"},{"location":"assets/problemsolving/#character-glitches","title":"\u274c Character Glitches","text":"<p>Non-ASCII characters appeared (<code>?</code>), fixed by limiting the character set:</p> <pre><code>const char charset[] = \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\";\n</code></pre>"},{"location":"assets/problemsolving/#flicker-fix","title":"\ud83d\udda5\ufe0f Flicker Fix","text":"<p>Replaced <code>system(\"cls\")</code> with cursor repositioning:</p> <pre><code>SetConsoleCursorPosition(hConsole, { (SHORT)x, (SHORT)it-&gt;position });\n</code></pre>"},{"location":"assets/reflection/","title":"Reflection","text":"<p>\ud83c\udfe0 Home | \ud83c\udfa8 Design | \ud83e\udde0 Algorithm | \ud83d\udc1e Debugging | \ud83e\udde0 Reflection</p>"},{"location":"assets/reflection/#key-takeaways","title":"\ud83d\udca1 Key Takeaways","text":"<ul> <li>Learned Windows Console API (cursor, color)</li> <li>Designed object-oriented structure for animation</li> <li>Practiced real-time logic and rendering</li> </ul>"},{"location":"assets/reflection/#improvements","title":"\ud83d\udcc8 Improvements","text":"<ul> <li>Support Unicode output</li> <li>Frame timing via <code>std::chrono</code></li> <li>Add user interaction (pause, change speed)</li> </ul>"}]}