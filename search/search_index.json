{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home / Introduction","text":"<p>\ud83c\udfe0 Home | \ud83c\udfa8 Design | \ud83e\udde0 Algorithm | \ud83d\udc1e Debugging | \ud83e\udde0 Reflection</p>"},{"location":"#digital-rain-in-modern-c","title":"\ud83c\udf27\ufe0f Digital Rain in Modern C++","text":"<p>Welcome to my blog on creating a Digital Rain effect using Modern C++! This project was inspired by the iconic Matrix-style digital rain, and explores graphics, algorithm design, and performance.</p> <p>\ud83d\udc49 Jump to the Design | See the Code | Debugging | Reflection</p>"},{"location":"#project-overview","title":"\ud83c\udfaf Project Overview","text":"<ul> <li>\u2705 Random falling characters</li> <li>\u2705 Character fading/lifespan</li> <li>\u2705 Real-time Windows console rendering</li> <li>\u2705 Modular object-oriented design</li> </ul>"},{"location":"algorithm/","title":"Algorithm Details","text":"<p>\ud83c\udfe0 Home | \ud83c\udfa8 Design | \ud83e\udde0 Algorithm | \ud83d\udc1e Debugging | \ud83e\udde0 Reflection</p>"},{"location":"algorithm/#random-drop-creation","title":"\ud83c\udfb2 Random Drop Creation","text":"<p>Each column has a 10% chance to create a new drop per frame if it\u2019s empty.</p> <pre><code>if (rand() % 100 &lt; 10 &amp;&amp; columns[x].empty()) {\n    createNewDrop(x);\n}\n</code></pre> <ul> <li> <p>A 10% chance is used to control spawn frequency.</p> </li> <li> <p>Prevents drops from stacking unnaturally.</p> </li> <li> <p>Drop lifespan, position, and color are randomized</p> </li> </ul>"},{"location":"algorithm/#fading-and-deletion","title":"\ud83d\udca1 Fading and Deletion","text":"<p>Characters fade as their <code>life</code> reduces. Below <code>life &lt; 5</code>, intensity is dimmed.</p> <pre><code>if (dc.life &lt; 5) {\n    color = dc.color &amp; ~FOREGROUND_INTENSITY;\n}\n</code></pre> <p>The animation is driven by a real-time loop in <code>DigitalRain::run()</code>:</p> <pre><code>while (!_kbhit()) {\n    update();\n    render();\n    Sleep(50); // Delay between frames\n}\n</code></pre> <p>This loop: - Continuously updates the state of all falling characters. - Redraws only the necessary parts of the screen. - Exits gracefully when a key is pressed using _kbhit().</p>"},{"location":"design/","title":"\ud83c\udfa8 Design &amp; Test","text":"<p>\ud83c\udfe0 Home | \ud83c\udfa8 Design | \ud83e\udde0 Algorithm | \ud83d\udc1e Debugging | \ud83e\udde0 Reflection</p>"},{"location":"design/#architecture-overview","title":"\ud83e\uddf1 Architecture Overview","text":"<p>The program is designed with 3 main components:</p> <ul> <li><code>DigitalRain</code>: Manages the animation loop, frame timing, and rendering logic.</li> <li><code>DropChar</code>: Struct representing a falling character with position, lifespan, value, and color.</li> <li><code>CharacterStream</code>: Utility class that generates randomized alphanumeric characters.</li> </ul>"},{"location":"design/#object-relationships","title":"\ud83d\udce6 Object Relationships","text":"<ul> <li><code>DigitalRain</code> contains a vector of <code>std::list&lt;DropChar&gt;</code> \u2014 each representing a vertical column.</li> <li>Characters are spawned, updated, and rendered via this structure.</li> <li><code>CharacterStream</code> is only called during creation of new drops.</li> </ul>"},{"location":"design/#testing-strategy","title":"\u2705 Testing Strategy","text":"<ul> <li>\ud83d\udda5\ufe0f Manual Resizing: Console window is resized to test dynamic column adaptation.</li> <li>\ud83e\uddea Keyboard Input: Exit tested using <code>_kbhit()</code> for clean shutdown.</li> <li>\ud83d\udc41\ufe0f Visual Tests:</li> <li>Ensured proper fading, drop speed, and color dimming.</li> <li>Verified characters did not overlap or \"stick\".</li> <li>\ud83d\udd01 Frame Stability: Tested with varying frame delays (Sleep values).</li> </ul>"},{"location":"design/#key-design-choices","title":"\ud83e\udde0 Key Design Choices","text":"<ul> <li>\u274c Avoided full screen clearing to reduce flicker (<code>system(\"cls\")</code>).</li> <li>\u2705 Used <code>SetConsoleCursorPosition()</code> for precision overwrite.</li> <li>\u2705 Used <code>std::list</code> for fast removal of expired characters mid-loop.</li> <li>\u2705 Colors and fade transitions were optimized using bitwise masking.</li> </ul>"},{"location":"problemsolving/","title":"Problem Solving","text":"<p>\ud83c\udfe0 Home | \ud83c\udfa8 Design | \ud83e\udde0 Algorithm | \ud83d\udc1e Debugging | \ud83e\udde0 Reflection</p>"},{"location":"problemsolving/#character-glitches","title":"\u274c Character Glitches","text":"<p>Non-ASCII characters appeared (<code>?</code>), fixed by limiting the character set:</p> <pre><code>const char charset[] = \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\";\n</code></pre>"},{"location":"problemsolving/#flicker-fix","title":"\ud83d\udda5\ufe0f Flicker Fix","text":"<p>Replaced <code>system(\"cls\")</code> with cursor repositioning:</p> <pre><code>SetConsoleCursorPosition(hConsole, { (SHORT)x, (SHORT)it-&gt;position });\n</code></pre>"},{"location":"reflection/","title":"\ud83e\udde0 Reflection &amp; Modern C++","text":""},{"location":"reflection/#learning-journey","title":"\ud83d\udcda Learning Journey","text":"<p>Creating the Digital Rain effect has deepened my understanding of real-time rendering, console programming, and the principles of modern C++.</p>"},{"location":"reflection/#modern-c-practices-used","title":"\ud83e\uddf0 Modern C++ Practices Used","text":"<ul> <li>Object-Oriented Design: Classes like <code>DigitalRain</code> and <code>CharacterStream</code> encapsulate logic and allow for reuse and modular design.</li> <li>Standard Library Containers: Used <code>std::vector</code> and <code>std::list</code> to manage dynamic character streams and enable efficient insert/delete.</li> <li>Scoped Initialization: Used <code>{}</code> initialization, <code>auto</code>, and RAII principles.</li> <li>Randomization &amp; Seeding: Used <code>srand(static_cast&lt;unsigned int&gt;(time(nullptr)))</code> to ensure randomness across runs.</li> </ul>"},{"location":"reflection/#what-i-learned","title":"\ud83d\udcac What I Learned","text":"<ul> <li>Efficient rendering without flickering requires precise cursor control and selective redrawing.</li> <li>Managing lifecycles of visual elements (drops) introduces game loop logic in a console app.</li> <li>MkDocs is a powerful tool for documenting C++ projects and aligns well with GitHub Pages deployment.</li> </ul>"},{"location":"reflection/#future-iteration","title":"\ud83d\udd2e Future Iteration","text":"<ul> <li>Use <code>std::chrono</code> and C++20 coroutines for smoother frame management.</li> <li>Integrate user interactivity (pause, speed control).</li> <li>Explore Unicode support for more authentic glyphs.</li> </ul> <p>\ud83c\udfe0 Home | \ud83c\udfa8 Design | \ud83e\udde0 Algorithm | \ud83d\udc1e Debugging | \ud83e\udde0 Reflection</p>"}]}